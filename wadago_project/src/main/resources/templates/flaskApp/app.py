from fileinput import filename
from glob import escape
from flask import Flask, request, jsonify
from flask.json import JSONEncoder
import keras
import numpy as np
from markupsafe import escape


app = Flask(__name__)
app.config['JSON_AS_ASCII'] = False

@app.route("/predict_price/<fileName>", methods=['GET'])
def hello1(fileName) :
    from keras.models import load_model
    
    model = load_model('D:/sping/wadago/wadago_project/src/main/resources/templates/flaskApp/traffic_model_2.h5')

    label_to_str = {
	 '0'   : '자형 교차로'
    ,'1'   : 'T자형 교차로'
    ,'2'   : 'Y자형 교차로'
    ,'3'   : 'ㅏ자형 교차로'
    ,'4'   : 'ㅓ자형 교차로'
    ,'5'   : '우선 도로'
    ,'6'   : '우합류 도로'
    ,'7'   : '좌합류 도로'
    ,'8'   : '회전형 교차로'
    ,'9'   : '철길 건널목'
    ,'10'  : '우로 굽은 도로'
    ,'11'  : '좌로 굽은 도로'
    ,'12'  : '우좌로 이중 굽은 도로'
    ,'13'  : '좌우로 이중 굽은 도로'
    ,'14'  : '오르막 경사'
    ,'15'  : '내리막 경사'
    ,'16'  : '도로 폭이 좁아짐'
    ,'17'  : '우측 차로 없어짐'
    ,'18'  : '좌측 차로 없어짐'
    ,'19'  : '우측방 통행'
    ,'20'  : '양측방 통행'
    ,'21'  : '중앙 분리대 시작'
    ,'22'  : '중앙 분리대 끝남'
    ,'23'  : '신호기'
    ,'24'  : '미끄러운 도로'
    ,'25'  : '강변 도로'
    ,'26'  : '노면 고르지 못함'
    ,'27'  : '과속 방지턱'
    ,'28'  : '낙석 도로'
    ,'29'  : '횡단 보도(주의)'
    ,'30'  : '어린이 보호(주의)'
    ,'31'  : '자전거(주의)'
    ,'32'  : '도로 공사중'
    ,'33'  : '비행기'
    ,'34'  : '횡풍'
    ,'35'  : '터널'
    ,'36'  : '야생 동물 보호'
    ,'37'  : '위험'
    ,'38'  : '상습 정체 구간'
    ,'39'  : '2방향 통행'
    ,'40'  : '교량'
    ,'41'  : '통행 금지'
    ,'42'  : '자동차 통행 금지'
    ,'43'  : '화물차 통행 금지'
    ,'44'  : '승합차 통행 금지'
    ,'45'  : '이륜차 및 원동기장치자전거 통행 금지'
    ,'46'  : '자동차, 이륜차 및 원동기장치자전거 통행 금지'
    ,'47'  : '경운기, 트랙터 및 손수레 통행 금지'
    ,'48'  : '자전거 통행 금지'
    ,'49'  : '진입 금지'
    ,'50'  : '직진 금지'
    ,'51'  : '우회전 금지'
    ,'52'  : '좌회전 금지'
    ,'53'  : '유턴 금지'
    ,'54'  : '앞지르기 금지'
    ,'55'  : '주정차 금지'
    ,'56'  : '주차 금지'
    ,'57'  : '차 중량 제한'
    ,'58'  : '차 높이 제한'
    ,'59'  : '차 폭 제한'
    ,'60'  : '차간 거리 확보'
    ,'61'  : '최고 속도 제한'
    ,'62'  : '최저 속도 제한'
    ,'63'  : '서행'
    ,'64'  : '일시 정지'
    ,'65'  : '양보'
    ,'66'  : '보행자 보행 금지'
    ,'67'  : '위험물적재차량 통행 금지'
    ,'68'  : '자동차 전용 도로'
    ,'69'  : '자전거 전용 도로'
    ,'70'  : '자전거 및 보행자 겸용 도로'
    ,'71'  : '회전 교차로'
    ,'72'  : '직진'
    ,'73'  : '우회전'
    ,'74'  : '좌회전'
    ,'75'  : '직진 및 우회전'
    ,'76'  : '직진 및 좌회전'
    ,'77'  : '좌우회전'
    ,'78'  : '유턴'
    ,'79'  : '양측방 통행'
    ,'80'  : '우측면 통행'
    ,'81'  : '좌측면 통행'
    ,'82'  : '진행 방향별 통행 구분'
    ,'83'  : '우회로'
    ,'84'  : '자전거 및 보행자 통행구분'
    ,'85'  : '자전거 전용 차로'
    ,'86'  : '주차장'
    ,'87'  : '자전거 주차장'
    ,'88'  : '보행자 전용 도로'
    ,'89'  : '횡단 보도'
    ,'90'  : '노인 보호'
    ,'91'  : '어린이 보호'
    ,'92'  : '자전거 횡단 도'
    ,'93'  : '일방 통행(우)'
    ,'94'  : '일방 통행(좌)'
    ,'95'  : '일방 통행(직)'
    ,'96'  : '비보호 좌회전'
    ,'97'  : '자전거 나란히'
    ,'98'  : '버스 전용 차로'
    ,'99'  : '다인승 차량 전용 차로'
    ,'100' : '통행 우선'
    ,'101' : '좌회전 및 유턴'
    ,'102' : '장애인 보호'}
    
    categories = [
      "0"
    , "1"
    , "10"
    , "100"
    , "101"
    , "102"
    , "11"
    , "12"
    , "13"
    , "14"
    , "15"
    , "16"
    , "17"
    , "18"
    , "19"
    , "2"
    , "20"
    , "21"
    , "22"
    , "23"
    , "24"
    , "25"
    , "26"
    , "27"
    , "28"
    , "29"
    , "3"
    , "30"
    , "31"
    , "32"
    , "33"
    , "34"
    , "35"
    , "36"
    , "37"
    , "38"
    , "39"
    , "4"
    , "40"
    , "41"
    , "42"
    , "43"
    , "44"
    , "45"
    , "46"
    , "47"
    , "48"
    , "49"
    , "5"
    , "50"
    , "51"
    , "52"
    , "53"
    , "54"
    , "55"
    , "56"
    , "57"
    , "58"
    , "59"
    , "6"
    , "60"
    , "61"
    , "62"
    , "63"
    , "64"
    , "65"
    , "66"
    , "67"
    , "68"
    , "69"
    , "7"
    , "70"
    , "71"
    , "72"
    , "73"
    , "74"
    , "75"
    , "76"
    , "77"
    , "78"
    , "79"
    , "8"
    , "80"
    , "81"
    , "82"
    , "83"
    , "84"
    , "85"
    , "86"
    , "87"
    , "88"
    , "89"
    , "9"
    , "90"
    , "91"
    , "92"
    , "93"
    , "94"
    , "95"
    , "96"
    , "97"
    , "98"
    , "99"]


    from PIL import Image
    image_w = 64
    image_h = 64
    X = []
    img = Image.open('D:/sping/wadago/wadago_project/src/main/resources/static/img/%s' % escape(fileName))
    img = img.convert("RGB")
    img_resized = img.resize((image_w, image_h))
    data = np.asarray(img_resized)
    X.append(data)
    X = np.array(X)
    X = X.astype(float) / 255

    date = {
        'result'      : str(label_to_str[categories[np.argmax(model.predict(X) , axis=1)[0]]]) ,
        'label'       : str(categories[np.argmax(model.predict(X) , axis=1)[0]])
    }

    return str(date), 200

@app.route("/hello", methods=['GET'])
def hello() :
    return "hello world", 200

if __name__ == '__main__':
    app.run(debug=False,host="127.0.0.1",port=6666)